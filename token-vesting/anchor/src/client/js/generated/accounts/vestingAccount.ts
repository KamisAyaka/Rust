/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VESTING_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  102, 73, 10, 233, 200, 188, 228, 216,
]);

export function getVestingAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VESTING_ACCOUNT_DISCRIMINATOR
  );
}

export type VestingAccount = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  mint: Address;
  treasuryTokenAccount: Address;
  companyName: string;
  treasuryBump: number;
  bump: number;
};

export type VestingAccountArgs = {
  owner: Address;
  mint: Address;
  treasuryTokenAccount: Address;
  companyName: string;
  treasuryBump: number;
  bump: number;
};

export function getVestingAccountEncoder(): Encoder<VestingAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['treasuryTokenAccount', getAddressEncoder()],
      ['companyName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['treasuryBump', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VESTING_ACCOUNT_DISCRIMINATOR })
  );
}

export function getVestingAccountDecoder(): Decoder<VestingAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['treasuryTokenAccount', getAddressDecoder()],
    ['companyName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['treasuryBump', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getVestingAccountCodec(): Codec<
  VestingAccountArgs,
  VestingAccount
> {
  return combineCodec(getVestingAccountEncoder(), getVestingAccountDecoder());
}

export function decodeVestingAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VestingAccount, TAddress>;
export function decodeVestingAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VestingAccount, TAddress>;
export function decodeVestingAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VestingAccount, TAddress> | MaybeAccount<VestingAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVestingAccountDecoder()
  );
}

export async function fetchVestingAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VestingAccount, TAddress>> {
  const maybeAccount = await fetchMaybeVestingAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVestingAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VestingAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVestingAccount(maybeAccount);
}

export async function fetchAllVestingAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VestingAccount>[]> {
  const maybeAccounts = await fetchAllMaybeVestingAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVestingAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VestingAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVestingAccount(maybeAccount)
  );
}

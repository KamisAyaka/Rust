/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const EMPLOYEE_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  65, 245, 87, 188, 58, 86, 209, 151,
]);

export function getEmployeeAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EMPLOYEE_ACCOUNT_DISCRIMINATOR
  );
}

export type EmployeeAccount = {
  discriminator: ReadonlyUint8Array;
  beneficiary: Address;
  startTime: bigint;
  endTime: bigint;
  cliffTime: bigint;
  vestingAccount: Address;
  totalAmount: bigint;
  totalWithdrawn: bigint;
  bump: number;
};

export type EmployeeAccountArgs = {
  beneficiary: Address;
  startTime: number | bigint;
  endTime: number | bigint;
  cliffTime: number | bigint;
  vestingAccount: Address;
  totalAmount: number | bigint;
  totalWithdrawn: number | bigint;
  bump: number;
};

export function getEmployeeAccountEncoder(): FixedSizeEncoder<EmployeeAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['beneficiary', getAddressEncoder()],
      ['startTime', getI64Encoder()],
      ['endTime', getI64Encoder()],
      ['cliffTime', getI64Encoder()],
      ['vestingAccount', getAddressEncoder()],
      ['totalAmount', getU64Encoder()],
      ['totalWithdrawn', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EMPLOYEE_ACCOUNT_DISCRIMINATOR })
  );
}

export function getEmployeeAccountDecoder(): FixedSizeDecoder<EmployeeAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['beneficiary', getAddressDecoder()],
    ['startTime', getI64Decoder()],
    ['endTime', getI64Decoder()],
    ['cliffTime', getI64Decoder()],
    ['vestingAccount', getAddressDecoder()],
    ['totalAmount', getU64Decoder()],
    ['totalWithdrawn', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getEmployeeAccountCodec(): FixedSizeCodec<
  EmployeeAccountArgs,
  EmployeeAccount
> {
  return combineCodec(getEmployeeAccountEncoder(), getEmployeeAccountDecoder());
}

export function decodeEmployeeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<EmployeeAccount, TAddress>;
export function decodeEmployeeAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<EmployeeAccount, TAddress>;
export function decodeEmployeeAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<EmployeeAccount, TAddress>
  | MaybeAccount<EmployeeAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getEmployeeAccountDecoder()
  );
}

export async function fetchEmployeeAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<EmployeeAccount, TAddress>> {
  const maybeAccount = await fetchMaybeEmployeeAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeEmployeeAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<EmployeeAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeEmployeeAccount(maybeAccount);
}

export async function fetchAllEmployeeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<EmployeeAccount>[]> {
  const maybeAccounts = await fetchAllMaybeEmployeeAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeEmployeeAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<EmployeeAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeEmployeeAccount(maybeAccount)
  );
}

export function getEmployeeAccountSize(): number {
  return 113;
}

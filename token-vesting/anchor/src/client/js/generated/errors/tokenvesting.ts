/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { TOKENVESTING_PROGRAM_ADDRESS } from '../programs';

/** CliamNotAvailableYet: cliam not available yet */
export const TOKENVESTING_ERROR__CLIAM_NOT_AVAILABLE_YET = 0x1770; // 6000
/** InvalidVestPeriod: invalid vest period */
export const TOKENVESTING_ERROR__INVALID_VEST_PERIOD = 0x1771; // 6001
/** CalculationOverflow: calculation overflow */
export const TOKENVESTING_ERROR__CALCULATION_OVERFLOW = 0x1772; // 6002
/** NothingToClaim: Nothing to cliam */
export const TOKENVESTING_ERROR__NOTHING_TO_CLAIM = 0x1773; // 6003

export type TokenvestingError =
  | typeof TOKENVESTING_ERROR__CALCULATION_OVERFLOW
  | typeof TOKENVESTING_ERROR__CLIAM_NOT_AVAILABLE_YET
  | typeof TOKENVESTING_ERROR__INVALID_VEST_PERIOD
  | typeof TOKENVESTING_ERROR__NOTHING_TO_CLAIM;

let tokenvestingErrorMessages: Record<TokenvestingError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tokenvestingErrorMessages = {
    [TOKENVESTING_ERROR__CALCULATION_OVERFLOW]: `calculation overflow`,
    [TOKENVESTING_ERROR__CLIAM_NOT_AVAILABLE_YET]: `cliam not available yet`,
    [TOKENVESTING_ERROR__INVALID_VEST_PERIOD]: `invalid vest period`,
    [TOKENVESTING_ERROR__NOTHING_TO_CLAIM]: `Nothing to cliam`,
  };
}

export function getTokenvestingErrorMessage(code: TokenvestingError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tokenvestingErrorMessages as Record<TokenvestingError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isTokenvestingError<
  TProgramErrorCode extends TokenvestingError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TOKENVESTING_PROGRAM_ADDRESS,
    code
  );
}

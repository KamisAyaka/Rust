/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedClaimTokensInstruction,
  type ParsedCreateEmployeeAccountInstruction,
  type ParsedCreateVestingAccountInstruction,
} from '../instructions';

export const TOKENVESTING_PROGRAM_ADDRESS =
  'AfJ7jgnc2VQ2tzTrNzVzCrq6VtHi9DhzYFuUUFmh49jF' as Address<'AfJ7jgnc2VQ2tzTrNzVzCrq6VtHi9DhzYFuUUFmh49jF'>;

export enum TokenvestingAccount {
  EmployeeAccount,
  VestingAccount,
}

export function identifyTokenvestingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenvestingAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 245, 87, 188, 58, 86, 209, 151])
      ),
      0
    )
  ) {
    return TokenvestingAccount.EmployeeAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 73, 10, 233, 200, 188, 228, 216])
      ),
      0
    )
  ) {
    return TokenvestingAccount.VestingAccount;
  }
  throw new Error(
    'The provided account could not be identified as a tokenvesting account.'
  );
}

export enum TokenvestingInstruction {
  ClaimTokens,
  CreateEmployeeAccount,
  CreateVestingAccount,
}

export function identifyTokenvestingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenvestingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 216, 210, 231, 0, 212, 42, 64])
      ),
      0
    )
  ) {
    return TokenvestingInstruction.ClaimTokens;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 118, 255, 19, 171, 159, 58, 107])
      ),
      0
    )
  ) {
    return TokenvestingInstruction.CreateEmployeeAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 178, 2, 13, 217, 172, 230, 218])
      ),
      0
    )
  ) {
    return TokenvestingInstruction.CreateVestingAccount;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenvesting instruction.'
  );
}

export type ParsedTokenvestingInstruction<
  TProgram extends string = 'AfJ7jgnc2VQ2tzTrNzVzCrq6VtHi9DhzYFuUUFmh49jF',
> =
  | ({
      instructionType: TokenvestingInstruction.ClaimTokens;
    } & ParsedClaimTokensInstruction<TProgram>)
  | ({
      instructionType: TokenvestingInstruction.CreateEmployeeAccount;
    } & ParsedCreateEmployeeAccountInstruction<TProgram>)
  | ({
      instructionType: TokenvestingInstruction.CreateVestingAccount;
    } & ParsedCreateVestingAccountInstruction<TProgram>);
